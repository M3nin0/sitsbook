[["data-visualisation-in-sits.html", "Data visualisation in sits Plotting Visualization of data cubes in interactive maps How colors work in sits Building a legend with colors Exporting colors to QGIS", " Data visualisation in sits This Chapter contains a discussion on plotting and visualisation of data cubes in sits. Plotting The plot() function produces a graphical display of data cubes, time series, models, and SOM maps. For each type of data, there is a dedicated version of the plot() function. See ?plot.sits for details. Plotting of time series, models and SOM outputs uses the ggplot2 package; maps are plotted using the tmap package. When plotting images and classified maps, users can control the output, which appropriate parameters for each type of image. In this chapter, we provide examples of the options available for plotting different types of maps. Plotting and visualisation function in sits use COG overview if available. COG overviews are reduced-resolution versions of the main image, stored within the same file. Overviews allow for quick rendering at lower zoom levels, improving performance when dealing with large images. Usually, a single GeoTIFF will have many overviews, to match different zoom levels Plotting false color maps We refer to false color maps as images which are plotted on a color scale. Usually these are single bands, indexes such as NDVI or DEMs. For these data sets, the parameters for plot() are: cube: data cube containing data to be visualised; band: band or index to be plotted; pallete: color scheme to be used for false color maps, which should be one of the RColorBrewer palettes. These palettes have been designed to be effective for map display by Prof Cynthia Brewer as described at the Brewer website. By default, optical images use the RdYlGn scheme, SAR images use Greys, and DEM cubes use Spectral. rev: whether the color palette should be reversed; TRUE for DEM cubes, and FALSE otherwise. scale: global scale parameter used by tmap. All font sizes, symbol sizes, border widths, and line widths are controlled by this value. Default is 0.75; users should vary this parameter and see the results. first_quantile: 1st quantile for stretching images (default = 0.05). last_quantile: last quantile for stretching images (default = 0.95). max_cog_size: for cloud-oriented geotiff files (COG), sets the maximum number of lines or columns of the COG overview to be used for plotting. The following optional parameters are available to allow for detailed control over the plot output: - graticules_labels_size: size of coordinates labels (default = 0.8). - legend_title_size: relative size of legend title (default = 1.0). - legend_text_size: relative size of legend text (default = 1.0). - legend_bg_color: color of legend background (default = “white”). - legend_bg_alpha: legend opacity (default = 0.5). - legend_position: where to place the legend (options = “inside” or “outside” with “inside” as default). The following example shows a plot of an NDVI index of a data cube. This data cube covers part of MGRS tile 20LMR and contains bands “B02”, “B03”, “B04”, “B05”, “B06”, “B07”, “B08”, “B11”, “B12”, “B8A”, “EVI”, “NBR”, and “NDVI” for the period 2022-01-05 to 2022-12-23. We will use parameters with other than their defaults. # set the directory where the data is data_dir &lt;- system.file(&quot;extdata/Rondonia-20LMR&quot;, package = &quot;sitsdata&quot;) # read the data cube ro_20LMR &lt;- sits_cube( source = &quot;MPC&quot;, collection = &quot;SENTINEL-2-L2A&quot;, data_dir = data_dir ) # plot the NDVI for date 2022-08-01 plot(ro_20LMR, band = &quot;NDVI&quot;, date = &quot;2022-08-01&quot;, palette = &quot;Greens&quot;, legend_position = &quot;outside&quot;, scale = 1.0 ) Figure 1: Sentinel-2 NDVI index covering tile 20LMR (© EU Copernicus Sentinel Programme; source: Microsoft modified by authors). For RGB color maps: red: band or index associated to the red color; green: band or index associated to the green color; blue: band or index associated to the blue color; first_quantile: 1st quantile for stretching images (default = 0.05) last_quantile: last quantile for stretching images (default = 0.95) For classified maps: legend: legend which associated colors to the classes; should be a named vector with classes as names and valid R colors as values. For example, c(\"Forest\" = \"green\", \"Water\" = \"blue\") or c(\"Forest\" = \"#1E8449\", \"Water\" = \"#2980B9\"). scale: global scale parameter used by tmap. max_cog_size: max number of lines or columns to be read when COG files are available; palette: color palette to be used if legend is not available and colors are not defined in the sits color table. Visualization of data cubes in interactive maps Data cubes and samples can also be shown as interactive maps using sits_view(). This function creates tiled overlays of different kinds of data cubes, allowing comparison between the original, intermediate and final results. It also includes background maps. The following example creates an interactive map combining the original data cube with the classified map. sits_view(sinop, band = &quot;NDVI&quot;, class_cube = sinop_map) How colors work in sits In examples provided in the book, the color legend is taken from a predefined color pallete provided by sits. The default color definition file used by sits has 220 class names, which can be shown using sits_colors() #&gt; [1] &quot;Returning all available colors&quot; #&gt; # A tibble: 236 × 2 #&gt; name color #&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 Evergreen_Broadleaf_Forest #1E8449 #&gt; 2 Evergreen_Broadleaf_Forests #1E8449 #&gt; 3 Tree_Cover_Broadleaved_Evergreen #1E8449 #&gt; 4 Forest #1E8449 #&gt; 5 Forests #1E8449 #&gt; 6 Closed_Forest #1E8449 #&gt; 7 Closed_Forests #1E8449 #&gt; 8 Mountainside_Forest #229C59 #&gt; 9 Mountainside_Forests #229C59 #&gt; 10 Open_Forest #53A145 #&gt; # ℹ 226 more rows These colors are grouped by typical legends used by the Earth observation community, which include “IGBP”, “UMD”, “ESA_CCI_LC”, “WORLDCOVER”, “PRODES”, “PRODES_VISUAL”, “TERRA_CLASS”, “TERRA_CLASS_PT”. The following commands shows the colors associated with the IGBP legend [1]. # Display default `sits` colors sits_colors_show(legend = &quot;IGBP&quot;) Figure 2: Colors used in the sits package to represeny IGBP legend (source: authors). The default color table can be extended using sits_colors_set(). As an example of a user-defined color table, consider a definition that covers level 1 of the Anderson Classification System used in the US National Land Cover Data, obtained by defining a set of colors associated to a new legend. The colors should be defined by HEX values and the color names should consist of a single string; multiple names need to be connected with an underscore(“_“). # Define a color table based on the Anderson Land Classification System us_nlcd &lt;- tibble::tibble(name = character(), color = character()) us_nlcd &lt;- us_nlcd |&gt; tibble::add_row(name = &quot;Urban_Built_Up&quot;, color = &quot;#85929E&quot;) |&gt; tibble::add_row(name = &quot;Agricultural_Land&quot;, color = &quot;#F0B27A&quot;) |&gt; tibble::add_row(name = &quot;Rangeland&quot;, color = &quot;#F1C40F&quot;) |&gt; tibble::add_row(name = &quot;Forest_Land&quot;, color = &quot;#27AE60&quot;) |&gt; tibble::add_row(name = &quot;Water&quot;, color = &quot;#2980B9&quot;) |&gt; tibble::add_row(name = &quot;Wetland&quot;, color = &quot;#D4E6F1&quot;) |&gt; tibble::add_row(name = &quot;Barren_Land&quot;, color = &quot;#FDEBD0&quot;) |&gt; tibble::add_row(name = &quot;Tundra&quot;, color = &quot;#EBDEF0&quot;) |&gt; tibble::add_row(name = &quot;Snow_and_Ice&quot;, color = &quot;#F7F9F9&quot;) # Load the color table into `sits` sits_colors_set(colors = us_nlcd, legend = &quot;US_NLCD&quot;) # Show the new legend sits_colors_show(legend = &quot;US_NLCD&quot;) Figure 3: Example of defining colors for the Anderson Land Classification Scheme(source: authors). The original default sits color table can be restored using sits_colors_reset(). Building a legend with colors Exporting colors to QGIS To simplify the process of importing your data to QGIS, the color palette used to display classified maps in sits can be exported as a QGIS style using sits_colors_qgis. The function takes two parameters: (a) cube, a classified data cube; and (b) file, the file where the QGIS style in XML will be written to. In this case study, we first retrieve and plot a classified data cube and then export the colors to a QGIS XML style. # Create a cube based on a classified image data_dir &lt;- system.file(&quot;extdata/Rondonia-20LLP&quot;, package = &quot;sitsdata&quot; ) # File name &quot;SENTINEL-2_MSI_20LLP_2020-06-04_2021-08-26_class_v1.tif&quot; rondonia_class_cube &lt;- sits_cube( source = &quot;AWS&quot;, collection = &quot;SENTINEL-S2-L2A-COGS&quot;, bands = &quot;class&quot;, labels = c( &quot;1&quot; = &quot;Burned_Area&quot;, &quot;2&quot; = &quot;Cleared_Area&quot;, &quot;3&quot; = &quot;Highly_Degraded&quot;, &quot;4&quot; = &quot;Forest&quot; ), data_dir = data_dir ) # Plot the classified cube plot(rondonia_class_cube, scale = 1.0) Figure 4: Classified data cube for the year 2020/2021 in Rondonia, Brazil (© EU Copernicus Sentinel Programme; source: authors). # Show the location of the classification file sits_colors_qgis(rondonia_class_cube, file = &quot;./tempdir/chp15/qgis_style.xml&quot;) References [1] M. Herold, R. Hubald, and A. Di Gregorio, “Translating and evaluating land cover legends using the UN Land Cover Classification System (LCCS),” GOFC-GOLD Florence, Italy, 2009. "]]
